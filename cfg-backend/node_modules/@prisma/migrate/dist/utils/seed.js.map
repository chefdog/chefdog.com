{
  "version": 3,
  "sources": ["../../src/utils/seed.ts"],
  "sourcesContent": ["import fs from 'fs'\nimport path from 'path'\nimport execa from 'execa'\nimport hasYarn from 'has-yarn'\nimport chalk from 'chalk'\nimport pkgUp from 'pkg-up'\nimport { promisify } from 'util'\nimport { getPrismaConfigFromPackageJson, logger, link } from '@prisma/sdk'\nimport Debug from '@prisma/debug'\n\nconst debug = Debug('prisma:migrate:seed')\nconst readFileAsync = promisify(fs.readFile)\n\n/*\n  Checks if user has a prisma/seed.ts or prisma/seed.js or prisma/seed.sh\n  If prisma.seed is not set in package.json it will return the best error message to help the user\n*/\nexport async function verifySeedConfigAndReturnMessage(\n  schemaPath: string | null,\n): Promise<string | undefined> {\n  const cwd = process.cwd()\n\n  // Detect if seed files are next to prisma.schema file\n  const detected = detectSeedFiles(cwd, schemaPath)\n\n  const prismaConfig = await getPrismaConfigFromPackageJson(cwd)\n\n  // New config is set in the package.json, no need for an error message\n  if (prismaConfig && prismaConfig.data?.seed) {\n    return undefined\n  }\n\n  // If new \"seed\" config is not set, help user to set it\n  const packageManager = hasYarn() ? 'yarn add -D' : 'npm i -D'\n\n  let message = `${chalk.red(\n    'To configure seeding in your project you need to add a \"prisma.seed\" property in your package.json with the command to execute it:',\n  )}\n\n1. Open the package.json of your project\n`\n\n  if (detected.numberOfSeedFiles) {\n    // Print warning if user has a \"ts-node\" script in their package.json, not supported anymore\n    await legacyTsNodeScriptWarning()\n\n    // Probably was using seed before 3.0 and need to add the seed property in package.json\n    message += `2. Add the following example to it:`\n\n    if (detected.js) {\n      message += `\n\\`\\`\\`\n\"prisma\": {\n  \"seed\": \"node ${detected.js}\"\n}\n\\`\\`\\`\n`\n    } else if (detected.ts) {\n      message += `\n\\`\\`\\`\n\"prisma\": {\n  \"seed\": \"ts-node ${detected.ts}\"\n}\n\\`\\`\\`\n\n3. Install the required dependencies by running:\n${chalk.green(`${packageManager} ts-node typescript @types/node`)}\n`\n    } else if (detected.sh) {\n      message += `\n\\`\\`\\`\n\"prisma\": {\n  \"seed\": \"${detected.sh}\"\n}\n\\`\\`\\`\nAnd run \\`chmod +x ${detected.sh}\\` to make it executable.`\n    }\n  } else {\n    message += `2. Add one of the following examples to your package.json:\n\n${chalk.bold('TypeScript:')}\n\\`\\`\\`\n\"prisma\": {\n  \"seed\": \"ts-node ./prisma/seed.ts\"\n}\n\\`\\`\\`\nAnd install the required dependencies by running:\n${packageManager} ts-node typescript @types/node\n\n${chalk.bold('JavaScript:')}\n\\`\\`\\`\n\"prisma\": {\n  \"seed\": \"node ./prisma/seed.js\"\n}\n\\`\\`\\`\n\n${chalk.bold('Bash:')}\n\\`\\`\\`\n\"prisma\": {\n  \"seed\": \"./prisma/seed.sh\"\n}\n\\`\\`\\`\nAnd run \\`chmod +x prisma/seed.sh\\` to make it executable.`\n  }\n\n  message += `\\nMore information in our documentation:\\n${link(\n    'https://pris.ly/d/seeding',\n  )}`\n\n  return message\n}\n\nexport async function getSeedCommandFromPackageJson(cwd: string) {\n  const prismaConfig = await getPrismaConfigFromPackageJson(cwd)\n\n  debug({ prismaConfig })\n\n  if (!prismaConfig || !prismaConfig.data?.seed) {\n    return null\n  }\n\n  const seedCommandFromPkgJson = prismaConfig.data.seed\n\n  // Validate if seed commad is a string\n  if (typeof seedCommandFromPkgJson !== 'string') {\n    throw new Error(\n      `Provided seed command \\`${seedCommandFromPkgJson}\\` from \\`${path.relative(\n        cwd,\n        prismaConfig.packagePath,\n      )}\\` must be of type string`,\n    )\n  }\n\n  if (!seedCommandFromPkgJson) {\n    throw new Error(\n      `Provided seed command \\`${seedCommandFromPkgJson}\\` from \\`${path.relative(\n        cwd,\n        prismaConfig.packagePath,\n      )}\\` cannot be empty`,\n    )\n  }\n\n  return seedCommandFromPkgJson\n}\n\nexport async function executeSeedCommand(command: string): Promise<boolean> {\n  console.info(`Running seed command \\`${chalk.italic(command)}\\` ...`)\n  try {\n    await execa.command(command, {\n      stdout: 'inherit',\n      stderr: 'pipe',\n    })\n  } catch (e) {\n    debug({ e })\n    console.error(\n      chalk.bold.red(`\\nAn error occured while running the seed command:`),\n    )\n    console.error(chalk.red(e.stderr || e))\n    return false\n  }\n\n  return true\n}\n\nfunction detectSeedFiles(cwd, schemaPath) {\n  let parentDirectory = path.relative(cwd, path.join(cwd, 'prisma'))\n  if (schemaPath) {\n    parentDirectory = path.relative(cwd, path.dirname(schemaPath))\n  }\n\n  const seedPath = path.join(parentDirectory, 'seed.')\n\n  const detected = {\n    seedPath,\n    numberOfSeedFiles: 0,\n    js: '',\n    ts: '',\n    sh: '',\n  }\n\n  const extensions = ['js', 'ts', 'sh']\n  for (const extension of extensions) {\n    const fullPath = seedPath + extension\n    if (!fs.existsSync(fullPath)) {\n      continue\n    }\n    detected[extension] = fullPath\n    detected.numberOfSeedFiles++\n  }\n\n  debug({ detected })\n\n  return detected\n}\n\nexport async function legacyTsNodeScriptWarning() {\n  // Check package.json for a \"ts-node\" script (so users can customize flags)\n  const scripts = await getScriptsFromPackageJson()\n\n  if (scripts?.['ts-node']) {\n    logger.warn(\n      chalk.yellow(\n        `The \"ts-node\" script in the package.json is not used anymore since version 3.0 and can now be removed.`,\n      ),\n    )\n  }\n\n  return undefined\n}\n\nasync function getScriptsFromPackageJson(cwd: string = process.cwd()) {\n  interface PkgJSON {\n    scripts: PkgJSONScripts\n  }\n  interface PkgJSONScripts {\n    [key: string]: string\n  }\n\n  try {\n    const pkgJsonPath = await pkgUp({ cwd })\n\n    if (!pkgJsonPath) {\n      return null\n    }\n\n    const pkgJsonString = await readFileAsync(pkgJsonPath, 'utf-8')\n\n    const pkgJson: PkgJSON = JSON.parse(pkgJsonString)\n\n    // Pick and return only items we need\n    const { 'ts-node': tsnode } = pkgJson.scripts\n\n    return { 'ts-node': tsnode }\n  } catch {\n    return null\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
