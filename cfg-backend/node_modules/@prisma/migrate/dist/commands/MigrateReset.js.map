{
  "version": 3,
  "sources": ["../../src/commands/MigrateReset.ts"],
  "sourcesContent": ["import {\n  arg,\n  Command,\n  format,\n  getSchemaPath,\n  HelpError,\n  isError,\n  isCi,\n  logger,\n} from '@prisma/sdk'\nimport chalk from 'chalk'\nimport path from 'path'\nimport prompt from 'prompts'\nimport { Migrate } from '../Migrate'\nimport {\n  ExperimentalFlagWithNewMigrateError,\n  EarlyAccessFeatureFlagWithNewMigrateError,\n} from '../utils/flagErrors'\nimport {\n  NoSchemaFoundError,\n  MigrateResetEnvNonInteractiveError,\n} from '../utils/errors'\nimport { printFilesFromMigrationIds } from '../utils/printFiles'\nimport { throwUpgradeErrorIfOldMigrate } from '../utils/detectOldMigrate'\nimport { ensureDatabaseExists } from '../utils/ensureDatabaseExists'\nimport { printDatasource } from '../utils/printDatasource'\nimport {\n  executeSeedCommand,\n  verifySeedConfigAndReturnMessage,\n  getSeedCommandFromPackageJson,\n} from '../utils/seed'\n\nexport class MigrateReset implements Command {\n  public static new(): MigrateReset {\n    return new MigrateReset()\n  }\n\n  private static help = format(`\nReset your database and apply all migrations, all data will be lost\n\n${chalk.bold('Usage')}\n\n  ${chalk.dim('$')} prisma migrate reset [options]\n\n${chalk.bold('Options')}\n\n       -h, --help   Display this help message\n         --schema   Custom path to your Prisma schema\n  --skip-generate   Skip triggering generators (e.g. Prisma Client)\n      --skip-seed   Skip triggering seed\n      -f, --force   Skip the confirmation prompt\n\n${chalk.bold('Examples')}\n\n  Reset your database and apply all migrations, all data will be lost\n  ${chalk.dim('$')} prisma migrate reset\n\n  Specify a schema\n  ${chalk.dim('$')} prisma migrate reset --schema=./schema.prisma \n\n  Use --force to skip the confirmation prompt\n  ${chalk.dim('$')} prisma migrate reset --force\n  `)\n\n  public async parse(argv: string[]): Promise<string | Error> {\n    const args = arg(argv, {\n      '--help': Boolean,\n      '-h': '--help',\n      '--force': Boolean,\n      '-f': '--force',\n      '--skip-generate': Boolean,\n      '--skip-seed': Boolean,\n      '--experimental': Boolean,\n      '--early-access-feature': Boolean,\n      '--schema': String,\n      '--telemetry-information': String,\n    })\n\n    if (isError(args)) {\n      return this.help(args.message)\n    }\n\n    if (args['--help']) {\n      return this.help()\n    }\n\n    if (args['--experimental']) {\n      throw new ExperimentalFlagWithNewMigrateError()\n    }\n\n    if (args['--early-access-feature']) {\n      throw new EarlyAccessFeatureFlagWithNewMigrateError()\n    }\n\n    const schemaPath = await getSchemaPath(args['--schema'])\n\n    if (!schemaPath) {\n      throw new NoSchemaFoundError()\n    }\n\n    console.info(\n      chalk.dim(\n        `Prisma schema loaded from ${path.relative(process.cwd(), schemaPath)}`,\n      ),\n    )\n\n    await printDatasource(schemaPath)\n\n    throwUpgradeErrorIfOldMigrate(schemaPath)\n\n    // Automatically create the database if it doesn't exist\n    const wasDbCreated = await ensureDatabaseExists('create', true, schemaPath)\n    if (wasDbCreated) {\n      console.info() // empty line\n      console.info(wasDbCreated)\n    }\n\n    console.info() // empty line\n    if (!args['--force']) {\n      // We use prompts.inject() for testing in our CI\n      if (isCi() && Boolean((prompt as any)._injected?.length) === false) {\n        throw new MigrateResetEnvNonInteractiveError()\n      }\n\n      const confirmation = await prompt({\n        type: 'confirm',\n        name: 'value',\n        message: `Are you sure you want to reset your database? ${chalk.red(\n          'All data will be lost',\n        )}.`,\n      })\n\n      if (!confirmation.value) {\n        console.info('Reset cancelled.')\n        process.exit(0)\n        // For snapshot test, because exit() is mocked\n        return ``\n      }\n    }\n\n    const migrate = new Migrate(schemaPath)\n\n    let migrationIds: string[]\n    try {\n      await migrate.reset()\n\n      const { appliedMigrationNames } = await migrate.applyMigrations()\n      migrationIds = appliedMigrationNames\n    } finally {\n      migrate.stop()\n    }\n\n    if (migrationIds.length === 0) {\n      console.info(`${chalk.green('Database reset successful\\n')}`)\n    } else {\n      console.info(\n        `${chalk.green('Database reset successful')}\n\nThe following migration(s) have been applied:\\n\\n${chalk(\n          printFilesFromMigrationIds('migrations', migrationIds, {\n            'migration.sql': '',\n          }),\n        )}`,\n      )\n    }\n\n    // Run if not skipped\n    if (!process.env.PRISMA_MIGRATE_SKIP_GENERATE && !args['--skip-generate']) {\n      await migrate.tryToRunGenerate()\n    }\n\n    // Run if not skipped\n    if (!process.env.PRISMA_MIGRATE_SKIP_SEED && !args['--skip-seed']) {\n      const seedCommandFromPkgJson = await getSeedCommandFromPackageJson(\n        process.cwd(),\n      )\n\n      if (seedCommandFromPkgJson) {\n        console.info() // empty line\n        const successfulSeeding = await executeSeedCommand(\n          seedCommandFromPkgJson,\n        )\n        if (successfulSeeding) {\n          console.info(\n            `\\n${\n              process.platform === 'win32' ? '' : '\uD83C\uDF31  '\n            }The seed command has been executed.`,\n          )\n        }\n      } else {\n        // Only used to help users to setup their seeds from old way to new package.json config\n        const schemaPath = await getSchemaPath(args['--schema'])\n\n        const message = await verifySeedConfigAndReturnMessage(schemaPath)\n        // warn because setup of the feature needs to be done\n        if (message) {\n          logger.warn(message)\n        }\n      }\n    }\n\n    return ``\n  }\n\n  public help(error?: string): string | HelpError {\n    if (error) {\n      return new HelpError(\n        `\\n${chalk.bold.red(`!`)} ${error}\\n${MigrateReset.help}`,\n      )\n    }\n    return MigrateReset.help\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
