{
  "version": 3,
  "sources": ["../../src/commands/DbSeed.ts"],
  "sourcesContent": ["import {\n  arg,\n  Command,\n  format,\n  HelpError,\n  isError,\n  getSchemaPath,\n  logger,\n} from '@prisma/sdk'\nimport chalk from 'chalk'\nimport {\n  getSeedCommandFromPackageJson,\n  executeSeedCommand,\n  verifySeedConfigAndReturnMessage,\n  legacyTsNodeScriptWarning,\n} from '../utils/seed'\n\nexport class DbSeed implements Command {\n  public static new(): DbSeed {\n    return new DbSeed()\n  }\n\n  private static help = format(`\n${process.platform === 'win32' ? '' : chalk.bold('\uD83D\uDE4C  ')}Seed your database\n\n${chalk.bold('Usage')}\n\n  ${chalk.dim('$')} prisma db seed [options]\n\n${chalk.bold('Options')}\n\n  -h, --help   Display this help message\n`)\n\n  public async parse(argv: string[]): Promise<string | Error> {\n    const args = arg(\n      argv,\n      {\n        '--help': Boolean,\n        '-h': '--help',\n        '--preview-feature': Boolean,\n        '--schema': String,\n        '--telemetry-information': String,\n      },\n      false,\n    )\n\n    if (isError(args)) {\n      return this.help(args.message)\n    }\n\n    if (args['--help']) {\n      return this.help()\n    }\n\n    if (args['--preview-feature']) {\n      logger.warn(`Prisma \"db seed\" was in Preview and is now Generally Available.\nYou can now remove the ${chalk.red('--preview-feature')} flag.`)\n\n      // Print warning if user has a \"ts-node\" script in their package.json, not supported anymore\n      await legacyTsNodeScriptWarning()\n    }\n\n    // Print warning if user is using --schema\n    if (args['--schema']) {\n      logger.warn(\n        chalk.yellow(\n          `The \"--schema\" parameter is not used anymore by \"prisma db seed\" since version 3.0 and can now be removed.`,\n        ),\n      )\n    }\n\n    const seedCommandFromPkgJson = await getSeedCommandFromPackageJson(\n      process.cwd(),\n    )\n\n    if (!seedCommandFromPkgJson) {\n      // Only used to help users to setup their seeds from old way to new package.json config\n      const schemaPath = await getSchemaPath(args['--schema'])\n\n      const message = await verifySeedConfigAndReturnMessage(schemaPath)\n      // Error because setup of the feature needs to be done\n      if (message) {\n        throw new Error(message)\n      }\n\n      return ``\n    }\n\n    // Seed command is set\n    // Execute user seed command\n    const successfulSeeding = await executeSeedCommand(seedCommandFromPkgJson)\n    if (successfulSeeding) {\n      return `\\n${\n        process.platform === 'win32' ? '' : '\uD83C\uDF31  '\n      }The seed command has been executed.`\n    } else {\n      process.exit(1)\n      // For snapshot test, because exit() is mocked\n      return ``\n    }\n  }\n\n  public help(error?: string): string | HelpError {\n    if (error) {\n      return new HelpError(`\\n${chalk.bold.red(`!`)} ${error}\\n${DbSeed.help}`)\n    }\n    return DbSeed.help\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,iBAQO;AACP,mBAAkB;AAClB,kBAKO;AAEA,sBAAgC;AAAA,SACvB,MAAc;AAC1B,WAAO,IAAI;AAAA;AAAA,QAeA,MAAM,MAAyC;AAC1D,UAAM,OAAO,oBACX,MACA;AAAA,MACE,UAAU;AAAA,MACV,MAAM;AAAA,MACN,qBAAqB;AAAA,MACrB,YAAY;AAAA,MACZ,2BAA2B;AAAA,OAE7B;AAGF,QAAI,wBAAQ,OAAO;AACjB,aAAO,KAAK,KAAK,KAAK;AAAA;AAGxB,QAAI,KAAK,WAAW;AAClB,aAAO,KAAK;AAAA;AAGd,QAAI,KAAK,sBAAsB;AAC7B,wBAAO,KAAK;AAAA,yBACO,qBAAM,IAAI;AAG7B,YAAM;AAAA;AAIR,QAAI,KAAK,aAAa;AACpB,wBAAO,KACL,qBAAM,OACJ;AAAA;AAKN,UAAM,yBAAyB,MAAM,+CACnC,QAAQ;AAGV,QAAI,CAAC,wBAAwB;AAE3B,YAAM,aAAa,MAAM,8BAAc,KAAK;AAE5C,YAAM,UAAU,MAAM,kDAAiC;AAEvD,UAAI,SAAS;AACX,cAAM,IAAI,MAAM;AAAA;AAGlB,aAAO;AAAA;AAKT,UAAM,oBAAoB,MAAM,oCAAmB;AACnD,QAAI,mBAAmB;AACrB,aAAO;AAAA,EACL,QAAQ,aAAa,UAAU,KAAK;AAAA,WAEjC;AACL,cAAQ,KAAK;AAEb,aAAO;AAAA;AAAA;AAAA,EAIJ,KAAK,OAAoC;AAC9C,QAAI,OAAO;AACT,aAAO,IAAI,qBAAU;AAAA,EAAK,qBAAM,KAAK,IAAI,QAAQ;AAAA,EAAU,QAAO;AAAA;AAEpE,WAAO,QAAO;AAAA;AAAA;AA1FX;AAKU,AALV,OAKU,OAAO,uBAAO;AAAA,EAC7B,QAAQ,aAAa,UAAU,KAAK,qBAAM,KAAK;AAAA;AAAA,EAE/C,qBAAM,KAAK;AAAA;AAAA,IAET,qBAAM,IAAI;AAAA;AAAA,EAEZ,qBAAM,KAAK;AAAA;AAAA;AAAA;",
  "names": []
}
