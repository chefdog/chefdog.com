import { BaseGeneratedListTypes, ItemRootValue, CommonFieldConfig, FieldTypeFunc, ListInfo } from '../../../types';
import { graphql } from '../../..';
declare type VirtualFieldGraphQLField = graphql.Field<ItemRootValue, any, graphql.OutputType, string>;
export declare type VirtualFieldConfig<TGeneratedListTypes extends BaseGeneratedListTypes> = CommonFieldConfig<TGeneratedListTypes> & {
    field: VirtualFieldGraphQLField | ((lists: Record<string, ListInfo>) => VirtualFieldGraphQLField);
    unreferencedConcreteInterfaceImplementations?: graphql.ObjectType<any>[];
    ui?: {
        /**
         * Defines what the Admin UI should fetch from this field, it's interpolated into a query like this:
         * ```graphql
         * query {
         *   item(where: { id: "..." }) {
         *     field${ui.query}
         *   }
         * }
         * ```
         *
         * This is only needed when you your field returns a GraphQL type other than a scalar(String and etc.)
         * or an enum or you need to provide arguments to the field.
         */
        query?: string;
    };
};
export declare const virtual: <TGeneratedListTypes extends BaseGeneratedListTypes>({ field, ...config }: VirtualFieldConfig<TGeneratedListTypes>) => FieldTypeFunc;
export {};
