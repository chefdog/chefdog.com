import { BaseGeneratedListTypes, FieldTypeFunc, CommonFieldConfig } from '../../../types';
export declare type SelectFieldConfig<TGeneratedListTypes extends BaseGeneratedListTypes> = CommonFieldConfig<TGeneratedListTypes> & ({
    /**
     * When a value is provided as just a string, it will be formatted in the same way
     * as field labels are to create the label.
     */
    options: ({
        label: string;
        value: string;
    } | string)[];
    /**
     * If `enum` is provided on SQLite, it will use an enum in GraphQL but a string in the database.
     */
    type?: 'string' | 'enum';
    defaultValue?: string;
} | {
    options: {
        label: string;
        value: number;
    }[];
    type: 'integer';
    defaultValue?: number;
}) & {
    ui?: {
        displayMode?: 'select' | 'segmented-control';
    };
    validation?: {
        /**
         * @default false
         */
        isRequired?: boolean;
    };
    isIndexed?: boolean | 'unique';
    graphql?: {
        create?: {
            isNonNull?: boolean;
        };
        read?: {
            isNonNull?: boolean;
        };
    };
    db?: {
        isNullable?: boolean;
    };
};
export declare const select: <TGeneratedListTypes extends BaseGeneratedListTypes>({ isIndexed, ui: { displayMode, ...ui }, defaultValue, validation, ...config }: SelectFieldConfig<TGeneratedListTypes>) => FieldTypeFunc;
