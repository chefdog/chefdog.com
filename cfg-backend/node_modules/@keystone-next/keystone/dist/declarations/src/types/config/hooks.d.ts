import type { KeystoneContext } from '..';
import type { BaseGeneratedListTypes } from '../utils';
declare type CommonArgs = {
    context: KeystoneContext;
    /**
     * The key of the list that the operation is occurring on
     */
    listKey: string;
};
export declare type ListHooks<TGeneratedListTypes extends BaseGeneratedListTypes> = {
    /**
     * Used to **modify the input** for create and update operations after default values and access control have been applied
     */
    resolveInput?: ResolveInputHook<TGeneratedListTypes>;
    /**
     * Used to **validate the input** for create and update operations once all resolveInput hooks resolved
     */
    validateInput?: ValidateInputHook<TGeneratedListTypes>;
    /**
     * Used to **validate** that a delete operation can happen after access control has occurred
     */
    validateDelete?: ValidateDeleteHook<TGeneratedListTypes>;
    /**
     * Used to **cause side effects** before a create, update, or delete operation once all validateInput hooks have resolved
     */
    beforeOperation?: BeforeOperationHook<TGeneratedListTypes>;
    /**
     * Used to **cause side effects** after a create, update, or delete operation operation has occurred
     */
    afterOperation?: AfterOperationHook<TGeneratedListTypes>;
};
declare type AddFieldPathToObj<T extends (arg: any) => any> = T extends (args: infer Args) => infer Result ? (args: Args & {
    fieldKey: string;
}) => Result : never;
declare type AddFieldPathArgToAllPropsOnObj<T extends Record<string, (arg: any) => any>> = {
    [Key in keyof T]: AddFieldPathToObj<T[Key]>;
};
export declare type FieldHooks<TGeneratedListTypes extends BaseGeneratedListTypes> = AddFieldPathArgToAllPropsOnObj<ListHooks<TGeneratedListTypes>>;
declare type ArgsForCreateOrUpdateOperation<TGeneratedListTypes extends BaseGeneratedListTypes> = {
    operation: 'create';
    item?: TGeneratedListTypes['backing'];
    /**
     * The GraphQL input **before** default values are applied
     */
    inputData: TGeneratedListTypes['inputs']['create'];
    /**
     * The GraphQL input **after** default values are applied
     */
    resolvedData: TGeneratedListTypes['inputs']['create'];
} | {
    operation: 'update';
    item: TGeneratedListTypes['backing'];
    /**
     * The GraphQL input **before** default values are applied
     */
    inputData: TGeneratedListTypes['inputs']['update'];
    /**
     * The GraphQL input **after** default values are applied
     */
    resolvedData: TGeneratedListTypes['inputs']['update'];
};
declare type ResolveInputHook<TGeneratedListTypes extends BaseGeneratedListTypes> = (args: ArgsForCreateOrUpdateOperation<TGeneratedListTypes> & CommonArgs) => Promise<TGeneratedListTypes['inputs']['create'] | TGeneratedListTypes['inputs']['update']> | TGeneratedListTypes['inputs']['create'] | TGeneratedListTypes['inputs']['update'] | Record<string, any> | string | number | boolean | null;
declare type ValidateInputHook<TGeneratedListTypes extends BaseGeneratedListTypes> = (args: ArgsForCreateOrUpdateOperation<TGeneratedListTypes> & {
    addValidationError: (error: string) => void;
} & CommonArgs) => Promise<void> | void;
declare type ValidateDeleteHook<TGeneratedListTypes extends BaseGeneratedListTypes> = (args: {
    operation: 'delete';
    item: TGeneratedListTypes['backing'];
    addValidationError: (error: string) => void;
} & CommonArgs) => Promise<void> | void;
declare type BeforeOperationHook<TGeneratedListTypes extends BaseGeneratedListTypes> = (args: (ArgsForCreateOrUpdateOperation<TGeneratedListTypes> | {
    operation: 'delete';
    item: TGeneratedListTypes['backing'];
    inputData: undefined;
    resolvedData: undefined;
}) & CommonArgs) => Promise<void> | void;
declare type AfterOperationHook<TGeneratedListTypes extends BaseGeneratedListTypes> = (args: (ArgsForCreateOrUpdateOperation<TGeneratedListTypes> | {
    operation: 'delete';
    item?: TGeneratedListTypes['backing'];
    inputData: undefined;
    resolvedData: undefined;
}) & {
    originalItem: TGeneratedListTypes['backing'];
} & CommonArgs) => Promise<void> | void;
export {};
