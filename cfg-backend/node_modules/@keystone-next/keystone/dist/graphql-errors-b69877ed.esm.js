import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import { ApolloError } from 'apollo-server-errors';

/**
 * Converts the first character of a string to uppercase.
 * @param {String} str The string to convert.
 * @returns The new string
 */
const upcase = str => str.substr(0, 1).toUpperCase() + str.substr(1);
/**
 * Turns a passed in string into
 * a human readable label
 * @param {String} str The string to convert.
 * @returns The new string
 */

const humanize = str => {
  return str.replace(/([a-z])([A-Z]+)/g, '$1 $2').split(/\s|_|\-/).filter(i => i).map(upcase).join(' ');
};

const userInputError = msg => new ApolloError(`Input error: ${msg}`);
const accessDeniedError = msg => new ApolloError(`Access denied: ${msg}`);
const prismaError = err => {
  return new ApolloError(`Prisma error: ${err.message.split('\n').slice(-1)[0].trim()}`, 'INTERNAL_SERVER_ERROR', {
    prisma: _objectSpread({}, err)
  });
};
const validationFailureError = messages => {
  const s = messages.map(m => `  - ${m}`).join('\n');
  return new ApolloError(`You provided invalid data for this operation.\n${s}`);
};
const extensionError = (extension, things) => {
  const s = things.map(t => `  - ${t.tag}: ${t.error.message}`).join('\n');
  return new ApolloError(`An error occured while running "${extension}".\n${s}`, 'INTERNAL_SERVER_ERROR', // Make the original stack traces available.
  {
    debug: things.map(t => ({
      stacktrace: t.error.stack,
      message: t.error.message
    }))
  });
};
const resolverError = things => {
  const s = things.map(t => `  - ${t.tag}: ${t.error.message}`).join('\n');
  return new ApolloError(`An error occured while resolving input fields.\n${s}`, 'INTERNAL_SERVER_ERROR', // Make the original stack traces available.
  {
    debug: things.map(t => ({
      stacktrace: t.error.stack,
      message: t.error.message
    }))
  });
};
const accessReturnError = things => {
  const s = things.map(t => `  - ${t.tag}: Returned: ${t.returned}. Expected: boolean.`).join('\n');
  return new ApolloError(`Invalid values returned from access control function.\n${s}`, 'INTERNAL_SERVER_ERROR');
}; // FIXME: In an upcoming PR we will use these args to construct a better
// error message, so leaving the, here for now. - TL
// eslint-disable-next-line @typescript-eslint/no-unused-vars

const limitsExceededError = args => new ApolloError('Your request exceeded server limits');
const filterAccessError = ({
  operation,
  fieldKeys
}) => new ApolloError(`You do not have access to perform '${operation}' operations on the fields ${JSON.stringify(fieldKeys)}.`);

export { accessReturnError as a, accessDeniedError as b, extensionError as e, filterAccessError as f, humanize as h, limitsExceededError as l, prismaError as p, resolverError as r, userInputError as u, validationFailureError as v };
