import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import { ApolloServer } from 'apollo-server-micro';
import { ApolloServer as ApolloServer$1 } from 'apollo-server-express';
import { createSessionContext } from '../session/dist/keystone.esm.js';

const createApolloServerMicro = ({
  graphQLSchema,
  createContext,
  sessionStrategy,
  graphqlConfig,
  connectionPromise
}) => {
  const context = async ({
    req,
    res
  }) => {
    await connectionPromise;
    return createContext({
      sessionContext: sessionStrategy ? await createSessionContext(sessionStrategy, req, res, createContext) : undefined,
      req
    });
  };

  const serverConfig = _createApolloServerConfig({
    graphQLSchema,
    graphqlConfig
  });

  return new ApolloServer(_objectSpread(_objectSpread({}, serverConfig), {}, {
    context
  }));
};
const createApolloServerExpress = ({
  graphQLSchema,
  createContext,
  sessionStrategy,
  graphqlConfig
}) => {
  const context = async ({
    req,
    res
  }) => createContext({
    sessionContext: sessionStrategy ? await createSessionContext(sessionStrategy, req, res, createContext) : undefined,
    req
  });

  const serverConfig = _createApolloServerConfig({
    graphQLSchema,
    graphqlConfig
  });

  return new ApolloServer$1(_objectSpread(_objectSpread({}, serverConfig), {}, {
    context
  }));
};

const _createApolloServerConfig = ({
  graphQLSchema,
  graphqlConfig
}) => {
  const apolloConfig = graphqlConfig === null || graphqlConfig === void 0 ? void 0 : graphqlConfig.apolloConfig;
  return _objectSpread(_objectSpread({
    schema: graphQLSchema,
    debug: graphqlConfig === null || graphqlConfig === void 0 ? void 0 : graphqlConfig.debug
  }, apolloConfig), {}, {
    formatError: formatError(graphqlConfig)
  });
};

const formatError = graphqlConfig => {
  return err => {
    var _graphqlConfig$apollo;

    let debug = graphqlConfig === null || graphqlConfig === void 0 ? void 0 : graphqlConfig.debug;

    if (debug === undefined) {
      debug = process.env.NODE_ENV !== 'production';
    }

    if (!debug && err.extensions) {
      // Strip out any `debug` extensions
      delete err.extensions.debug;
      delete err.extensions.exception;
    }

    if (graphqlConfig !== null && graphqlConfig !== void 0 && (_graphqlConfig$apollo = graphqlConfig.apolloConfig) !== null && _graphqlConfig$apollo !== void 0 && _graphqlConfig$apollo.formatError) {
      return graphqlConfig.apolloConfig.formatError(err);
    } else {
      return err;
    }
  };
};

export { createApolloServerExpress as a, createApolloServerMicro as c };
