import {
  KeystoneListsAPI as GenericKeystoneListsAPI,
  KeystoneDbAPI as GenericKeystoneDbAPI,
  KeystoneContext as GenericKeystoneContext,
} from '@keystone-next/keystone/types';
type Scalars = {
  readonly ID: string;
  readonly Boolean: boolean;
  readonly String: string;
  readonly Int: number;
  readonly Float: number;
  readonly JSON: import('@keystone-next/keystone/types').JSONValue;
  readonly Decimal: import('@keystone-next/keystone/types').Decimal | string;
};

export type PostStatusType = 'draft' | 'published';

export type PostWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null;
};

export type PostWhereInput = {
  readonly AND?: ReadonlyArray<PostWhereInput> | PostWhereInput | null;
  readonly OR?: ReadonlyArray<PostWhereInput> | PostWhereInput | null;
  readonly NOT?: ReadonlyArray<PostWhereInput> | PostWhereInput | null;
  readonly id?: IDFilter | null;
  readonly title?: StringFilter | null;
  readonly status?: PostStatusTypeNullableFilter | null;
  readonly content?: StringFilter | null;
  readonly publishDate?: DateTimeNullableFilter | null;
  readonly author?: AuthorWhereInput | null;
};

export type IDFilter = {
  readonly equals?: Scalars['ID'] | null;
  readonly in?: ReadonlyArray<Scalars['ID']> | Scalars['ID'] | null;
  readonly notIn?: ReadonlyArray<Scalars['ID']> | Scalars['ID'] | null;
  readonly lt?: Scalars['ID'] | null;
  readonly lte?: Scalars['ID'] | null;
  readonly gt?: Scalars['ID'] | null;
  readonly gte?: Scalars['ID'] | null;
  readonly not?: IDFilter | null;
};

export type StringFilter = {
  readonly equals?: Scalars['String'] | null;
  readonly in?: ReadonlyArray<Scalars['String']> | Scalars['String'] | null;
  readonly notIn?: ReadonlyArray<Scalars['String']> | Scalars['String'] | null;
  readonly lt?: Scalars['String'] | null;
  readonly lte?: Scalars['String'] | null;
  readonly gt?: Scalars['String'] | null;
  readonly gte?: Scalars['String'] | null;
  readonly contains?: Scalars['String'] | null;
  readonly startsWith?: Scalars['String'] | null;
  readonly endsWith?: Scalars['String'] | null;
  readonly not?: NestedStringFilter | null;
};

export type NestedStringFilter = {
  readonly equals?: Scalars['String'] | null;
  readonly in?: ReadonlyArray<Scalars['String']> | Scalars['String'] | null;
  readonly notIn?: ReadonlyArray<Scalars['String']> | Scalars['String'] | null;
  readonly lt?: Scalars['String'] | null;
  readonly lte?: Scalars['String'] | null;
  readonly gt?: Scalars['String'] | null;
  readonly gte?: Scalars['String'] | null;
  readonly contains?: Scalars['String'] | null;
  readonly startsWith?: Scalars['String'] | null;
  readonly endsWith?: Scalars['String'] | null;
  readonly not?: NestedStringFilter | null;
};

export type PostStatusTypeNullableFilter = {
  readonly equals?: PostStatusType | null;
  readonly in?: ReadonlyArray<PostStatusType> | PostStatusType | null;
  readonly notIn?: ReadonlyArray<PostStatusType> | PostStatusType | null;
  readonly not?: PostStatusTypeNullableFilter | null;
};

export type DateTimeNullableFilter = {
  readonly equals?: any | null;
  readonly in?: ReadonlyArray<any> | any | null;
  readonly notIn?: ReadonlyArray<any> | any | null;
  readonly lt?: any | null;
  readonly lte?: any | null;
  readonly gt?: any | null;
  readonly gte?: any | null;
  readonly not?: DateTimeNullableFilter | null;
};

export type PostOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly title?: OrderDirection | null;
  readonly status?: OrderDirection | null;
  readonly content?: OrderDirection | null;
  readonly publishDate?: OrderDirection | null;
};

export type OrderDirection = 'asc' | 'desc';

export type PostUpdateInput = {
  readonly title?: Scalars['String'] | null;
  readonly status?: PostStatusType | null;
  readonly content?: Scalars['String'] | null;
  readonly publishDate?: any | null;
  readonly author?: AuthorRelateToOneForUpdateInput | null;
};

export type AuthorRelateToOneForUpdateInput = {
  readonly create?: AuthorCreateInput | null;
  readonly connect?: AuthorWhereUniqueInput | null;
  readonly disconnect?: Scalars['Boolean'] | null;
};

export type PostUpdateArgs = {
  readonly where: PostWhereUniqueInput;
  readonly data: PostUpdateInput;
};

export type PostCreateInput = {
  readonly title?: Scalars['String'] | null;
  readonly status?: PostStatusType | null;
  readonly content?: Scalars['String'] | null;
  readonly publishDate?: any | null;
  readonly author?: AuthorRelateToOneForCreateInput | null;
};

export type AuthorRelateToOneForCreateInput = {
  readonly create?: AuthorCreateInput | null;
  readonly connect?: AuthorWhereUniqueInput | null;
};

export type AuthorWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null;
  readonly email?: Scalars['String'] | null;
};

export type AuthorWhereInput = {
  readonly AND?: ReadonlyArray<AuthorWhereInput> | AuthorWhereInput | null;
  readonly OR?: ReadonlyArray<AuthorWhereInput> | AuthorWhereInput | null;
  readonly NOT?: ReadonlyArray<AuthorWhereInput> | AuthorWhereInput | null;
  readonly id?: IDFilter | null;
  readonly name?: StringFilter | null;
  readonly email?: StringFilter | null;
  readonly posts?: PostManyRelationFilter | null;
};

export type PostManyRelationFilter = {
  readonly every?: PostWhereInput | null;
  readonly some?: PostWhereInput | null;
  readonly none?: PostWhereInput | null;
};

export type AuthorOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly name?: OrderDirection | null;
  readonly email?: OrderDirection | null;
};

export type AuthorUpdateInput = {
  readonly name?: Scalars['String'] | null;
  readonly email?: Scalars['String'] | null;
  readonly posts?: PostRelateToManyForUpdateInput | null;
};

export type PostRelateToManyForUpdateInput = {
  readonly disconnect?:
    | ReadonlyArray<PostWhereUniqueInput>
    | PostWhereUniqueInput
    | null;
  readonly set?:
    | ReadonlyArray<PostWhereUniqueInput>
    | PostWhereUniqueInput
    | null;
  readonly create?: ReadonlyArray<PostCreateInput> | PostCreateInput | null;
  readonly connect?:
    | ReadonlyArray<PostWhereUniqueInput>
    | PostWhereUniqueInput
    | null;
};

export type AuthorUpdateArgs = {
  readonly where: AuthorWhereUniqueInput;
  readonly data: AuthorUpdateInput;
};

export type AuthorCreateInput = {
  readonly name?: Scalars['String'] | null;
  readonly email?: Scalars['String'] | null;
  readonly posts?: PostRelateToManyForCreateInput | null;
};

export type PostRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<PostCreateInput> | PostCreateInput | null;
  readonly connect?:
    | ReadonlyArray<PostWhereUniqueInput>
    | PostWhereUniqueInput
    | null;
};

export type KeystoneAdminUIFieldMetaCreateViewFieldMode = 'edit' | 'hidden';

export type KeystoneAdminUIFieldMetaListViewFieldMode = 'read' | 'hidden';

export type KeystoneAdminUIFieldMetaItemViewFieldMode =
  | 'edit'
  | 'read'
  | 'hidden';

export type QueryMode = 'default' | 'insensitive';

export type KeystoneAdminUISortDirection = 'ASC' | 'DESC';

export type PostListTypeInfo = {
  key: 'Post';
  fields: 'id' | 'title' | 'status' | 'content' | 'publishDate' | 'author';
  backing: import('.prisma/client').Post;
  inputs: {
    where: PostWhereInput;
    uniqueWhere: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  };
  args: {
    listQuery: {
      readonly where?: PostWhereInput;
      readonly orderBy?: ReadonlyArray<PostOrderByInput> | PostOrderByInput;
      readonly take?: Scalars['Int'] | null;
      readonly skip?: Scalars['Int'];
    };
  };
};

export type PostListFn = (
  listConfig: import('@keystone-next/keystone').ListConfig<
    PostListTypeInfo,
    PostListTypeInfo['fields']
  >
) => import('@keystone-next/keystone').ListConfig<
  PostListTypeInfo,
  PostListTypeInfo['fields']
>;

export type AuthorListTypeInfo = {
  key: 'Author';
  fields: 'id' | 'name' | 'email' | 'posts';
  backing: import('.prisma/client').Author;
  inputs: {
    where: AuthorWhereInput;
    uniqueWhere: AuthorWhereUniqueInput;
    create: AuthorCreateInput;
    update: AuthorUpdateInput;
  };
  args: {
    listQuery: {
      readonly where?: AuthorWhereInput;
      readonly orderBy?: ReadonlyArray<AuthorOrderByInput> | AuthorOrderByInput;
      readonly take?: Scalars['Int'] | null;
      readonly skip?: Scalars['Int'];
    };
  };
};

export type AuthorListFn = (
  listConfig: import('@keystone-next/keystone').ListConfig<
    AuthorListTypeInfo,
    AuthorListTypeInfo['fields']
  >
) => import('@keystone-next/keystone').ListConfig<
  AuthorListTypeInfo,
  AuthorListTypeInfo['fields']
>;

export type KeystoneListsTypeInfo = {
  readonly Post: PostListTypeInfo;
  readonly Author: AuthorListTypeInfo;
};
export type KeystoneListsAPI = GenericKeystoneListsAPI<KeystoneListsTypeInfo>;
export type KeystoneDbAPI = GenericKeystoneDbAPI<KeystoneListsTypeInfo>;

export type KeystoneContext = Omit<
  GenericKeystoneContext,
  'db' | 'query' | 'prisma'
> & {
  db: KeystoneDbAPI;
  query: KeystoneListsAPI;
  prisma: import('.prisma/client').PrismaClient;
};
