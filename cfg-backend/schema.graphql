# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Post {
  id: ID!
  title: String
  status: PostStatusType
  image: String
  intro: String
  content(
    where: ParagraphWhereInput! = {}
    orderBy: [ParagraphOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Paragraph!]
  contentCount(where: ParagraphWhereInput! = {}): Int
  publishDate: DateTime
  author: Author
}

enum PostStatusType {
  draft
  published
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: PostStatusTypeNullableFilter
  image: StringFilter
  intro: StringFilter
  content: ParagraphManyRelationFilter
  publishDate: DateTimeNullableFilter
  author: AuthorWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostStatusTypeNullableFilter {
  equals: PostStatusType
  in: [PostStatusType!]
  notIn: [PostStatusType!]
  not: PostStatusTypeNullableFilter
}

input ParagraphManyRelationFilter {
  every: ParagraphWhereInput
  some: ParagraphWhereInput
  none: ParagraphWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  image: OrderDirection
  intro: OrderDirection
  publishDate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PostUpdateInput {
  title: String
  status: PostStatusType
  image: String
  intro: String
  content: ParagraphRelateToManyForUpdateInput
  publishDate: DateTime
  author: AuthorRelateToOneForUpdateInput
}

input ParagraphRelateToManyForUpdateInput {
  disconnect: [ParagraphWhereUniqueInput!]
  set: [ParagraphWhereUniqueInput!]
  create: [ParagraphCreateInput!]
  connect: [ParagraphWhereUniqueInput!]
}

input AuthorRelateToOneForUpdateInput {
  create: AuthorCreateInput
  connect: AuthorWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: PostStatusType
  image: String
  intro: String
  content: ParagraphRelateToManyForCreateInput
  publishDate: DateTime
  author: AuthorRelateToOneForCreateInput
}

input ParagraphRelateToManyForCreateInput {
  create: [ParagraphCreateInput!]
  connect: [ParagraphWhereUniqueInput!]
}

input AuthorRelateToOneForCreateInput {
  create: AuthorCreateInput
  connect: AuthorWhereUniqueInput
}

type Author {
  id: ID!
  name: String
  email: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input AuthorWhereUniqueInput {
  id: ID
  email: String
}

input AuthorWhereInput {
  AND: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  NOT: [AuthorWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input AuthorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input AuthorUpdateInput {
  name: String
  email: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input AuthorUpdateArgs {
  where: AuthorWhereUniqueInput!
  data: AuthorUpdateInput!
}

input AuthorCreateInput {
  name: String
  email: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Paragraph {
  id: ID!
  title: String
  content: String
}

input ParagraphWhereUniqueInput {
  id: ID
}

input ParagraphWhereInput {
  AND: [ParagraphWhereInput!]
  OR: [ParagraphWhereInput!]
  NOT: [ParagraphWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
}

input ParagraphOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
}

input ParagraphUpdateInput {
  title: String
  content: String
}

input ParagraphUpdateArgs {
  where: ParagraphWhereUniqueInput!
  data: ParagraphUpdateInput!
}

input ParagraphCreateInput {
  title: String
  content: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createAuthor(data: AuthorCreateInput!): Author
  createAuthors(data: [AuthorCreateInput!]!): [Author]
  updateAuthor(where: AuthorWhereUniqueInput!, data: AuthorUpdateInput!): Author
  updateAuthors(data: [AuthorUpdateArgs!]!): [Author]
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteAuthors(where: [AuthorWhereUniqueInput!]!): [Author]
  createParagraph(data: ParagraphCreateInput!): Paragraph
  createParagraphs(data: [ParagraphCreateInput!]!): [Paragraph]
  updateParagraph(
    where: ParagraphWhereUniqueInput!
    data: ParagraphUpdateInput!
  ): Paragraph
  updateParagraphs(data: [ParagraphUpdateArgs!]!): [Paragraph]
  deleteParagraph(where: ParagraphWhereUniqueInput!): Paragraph
  deleteParagraphs(where: [ParagraphWhereUniqueInput!]!): [Paragraph]
}

type Query {
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  authors(
    where: AuthorWhereInput! = {}
    orderBy: [AuthorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Author!]
  author(where: AuthorWhereUniqueInput!): Author
  authorsCount(where: AuthorWhereInput! = {}): Int
  paragraphs(
    where: ParagraphWhereInput! = {}
    orderBy: [ParagraphOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Paragraph!]
  paragraph(where: ParagraphWhereUniqueInput!): Paragraph
  paragraphsCount(where: ParagraphWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
