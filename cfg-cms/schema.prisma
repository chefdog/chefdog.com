// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url      = env("DATABASE_URL")
  provider = "sqlite"
}

generator client {
  provider   = "prisma-client-js"
  output     = "node_modules/.prisma/client"
  engineType = "binary"
}

model User {
  id       String    @id @default(cuid())
  name     String    @default("")
  email    String    @unique @default("")
  password String
  posts    Post[]    @relation("Post_author")
  articles Article[] @relation("Article_author")
}

model Post {
  id              String    @id @default(cuid())
  title           String    @default("")
  introduction    String    @default("")
  status          String?   @default("draft")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_mode      String?
  image_id        String?
  content         String    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  publishDate     DateTime?
  author          User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId        String?   @map("author")
  tags            Tag[]     @relation("Post_tags_Tag_posts")

  @@index([authorId])
}

model Article {
  id              String       @id @default(cuid())
  title           String       @default("")
  introduction    String       @default("")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_mode      String?
  image_id        String?
  publishDate     DateTime?
  status          String?      @default("draft")
  articleType     String?
  rating          String?
  paragraphs      Paragraph[]  @relation("Paragraph_articles")
  location        Location?    @relation("Article_location", fields: [locationId], references: [id])
  locationId      String?      @map("location")
  reviewItems     ReviewItem[] @relation("Article_reviewItems_ReviewItem_items")
  company         Company?     @relation("Article_company", fields: [companyId], references: [id])
  companyId       String?      @map("company")
  author          User?        @relation("Article_author", fields: [authorId], references: [id])
  authorId        String?      @map("author")

  @@index([locationId])
  @@index([companyId])
  @@index([authorId])
}

model Paragraph {
  id              String   @id @default(cuid())
  title           String   @default("")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_mode      String?
  image_id        String?
  content         String   @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  articles        Article? @relation("Paragraph_articles", fields: [articlesId], references: [id])
  articlesId      String?  @map("articles")

  @@index([articlesId])
}

model ReviewItem {
  id      String    @id @default(cuid())
  title   String    @default("")
  grinder Float?
  coffee  Float?
  time    Float?
  volume  Float?
  items   Article[] @relation("Article_reviewItems_ReviewItem_items")
}

model Company {
  id       String    @id @default(cuid())
  name     String    @default("")
  website  String    @default("")
  twitter  String    @default("")
  articles Article[] @relation("Article_company")
}

model Tag {
  id    String @id @default(cuid())
  name  String @default("")
  posts Post[] @relation("Post_tags_Tag_posts")
}

model Location {
  id        String    @id @default(cuid())
  name      String    @default("")
  articles  Article[] @relation("Article_location")
  longitude String    @default("")
  latitude  String    @default("")
  city      String    @default("")
  country   String    @default("")
  zipcode   String    @default("")
}