# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Mutation {
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createArticle(data: ArticleCreateInput!): Article
  createArticles(data: [ArticleCreateInput!]!): [Article]
  updateArticle(
    where: ArticleWhereUniqueInput!
    data: ArticleUpdateInput!
  ): Article
  updateArticles(data: [ArticleUpdateArgs!]!): [Article]
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteArticles(where: [ArticleWhereUniqueInput!]!): [Article]
  createParagraph(data: ParagraphCreateInput!): Paragraph
  createParagraphs(data: [ParagraphCreateInput!]!): [Paragraph]
  updateParagraph(
    where: ParagraphWhereUniqueInput!
    data: ParagraphUpdateInput!
  ): Paragraph
  updateParagraphs(data: [ParagraphUpdateArgs!]!): [Paragraph]
  deleteParagraph(where: ParagraphWhereUniqueInput!): Paragraph
  deleteParagraphs(where: [ParagraphWhereUniqueInput!]!): [Paragraph]
  createReviewItem(data: ReviewItemCreateInput!): ReviewItem
  createReviewItems(data: [ReviewItemCreateInput!]!): [ReviewItem]
  updateReviewItem(
    where: ReviewItemWhereUniqueInput!
    data: ReviewItemUpdateInput!
  ): ReviewItem
  updateReviewItems(data: [ReviewItemUpdateArgs!]!): [ReviewItem]
  deleteReviewItem(where: ReviewItemWhereUniqueInput!): ReviewItem
  deleteReviewItems(where: [ReviewItemWhereUniqueInput!]!): [ReviewItem]
  createCompany(data: CompanyCreateInput!): Company
  createCompanies(data: [CompanyCreateInput!]!): [Company]
  updateCompany(
    where: CompanyWhereUniqueInput!
    data: CompanyUpdateInput!
  ): Company
  updateCompanies(data: [CompanyUpdateArgs!]!): [Company]
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteCompanies(where: [CompanyWhereUniqueInput!]!): [Company]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createLocation(data: LocationCreateInput!): Location
  createLocations(data: [LocationCreateInput!]!): [Location]
  updateLocation(
    where: LocationWhereUniqueInput!
    data: LocationUpdateInput!
  ): Location
  updateLocations(data: [LocationUpdateArgs!]!): [Location]
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteLocations(where: [LocationWhereUniqueInput!]!): [Location]
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  articlesCount(where: ArticleWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  articles: ArticleManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input ArticleManyRelationFilter {
  every: ArticleWhereInput
  some: ArticleWhereInput
  none: ArticleWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  articles: ArticleRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input ArticleRelateToManyForUpdateInput {
  disconnect: [ArticleWhereUniqueInput!]
  set: [ArticleWhereUniqueInput!]
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  articles: ArticleRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input ArticleRelateToManyForCreateInput {
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  introduction: String
  status: String
  image: ImageFieldOutput
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  introduction: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  introduction: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  introduction: String
  status: String
  image: ImageFieldInput
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  introduction: String
  status: String
  image: ImageFieldInput
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Article {
  id: ID!
  title: String
  introduction: String
  image: ImageFieldOutput
  publishDate: DateTime
  status: String
  articleType: ArticleArticleTypeType
  rating: ArticleRatingType
  paragraphs(
    where: ParagraphWhereInput! = {}
    orderBy: [ParagraphOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Paragraph!]
  paragraphsCount(where: ParagraphWhereInput! = {}): Int
  location: Location
  reviewItems(
    where: ReviewItemWhereInput! = {}
    orderBy: [ReviewItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReviewItem!]
  reviewItemsCount(where: ReviewItemWhereInput! = {}): Int
  company: Company
  author: User
}

enum ArticleArticleTypeType {
  coffee
  tech
}

enum ArticleRatingType {
  top
  medium
  low
}

input ArticleWhereUniqueInput {
  id: ID
}

input ArticleWhereInput {
  AND: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  NOT: [ArticleWhereInput!]
  id: IDFilter
  title: StringFilter
  introduction: StringFilter
  publishDate: DateTimeNullableFilter
  status: StringNullableFilter
  articleType: ArticleArticleTypeTypeNullableFilter
  rating: ArticleRatingTypeNullableFilter
  paragraphs: ParagraphManyRelationFilter
  location: LocationWhereInput
  reviewItems: ReviewItemManyRelationFilter
  company: CompanyWhereInput
  author: UserWhereInput
}

input ArticleArticleTypeTypeNullableFilter {
  equals: ArticleArticleTypeType
  in: [ArticleArticleTypeType!]
  notIn: [ArticleArticleTypeType!]
  not: ArticleArticleTypeTypeNullableFilter
}

input ArticleRatingTypeNullableFilter {
  equals: ArticleRatingType
  in: [ArticleRatingType!]
  notIn: [ArticleRatingType!]
  not: ArticleRatingTypeNullableFilter
}

input ParagraphManyRelationFilter {
  every: ParagraphWhereInput
  some: ParagraphWhereInput
  none: ParagraphWhereInput
}

input ReviewItemManyRelationFilter {
  every: ReviewItemWhereInput
  some: ReviewItemWhereInput
  none: ReviewItemWhereInput
}

input ArticleOrderByInput {
  id: OrderDirection
  title: OrderDirection
  introduction: OrderDirection
  publishDate: OrderDirection
  status: OrderDirection
  articleType: OrderDirection
  rating: OrderDirection
}

input ArticleUpdateInput {
  title: String
  introduction: String
  image: ImageFieldInput
  publishDate: DateTime
  status: String
  articleType: ArticleArticleTypeType
  rating: ArticleRatingType
  paragraphs: ParagraphRelateToManyForUpdateInput
  location: LocationRelateToOneForUpdateInput
  reviewItems: ReviewItemRelateToManyForUpdateInput
  company: CompanyRelateToOneForUpdateInput
  author: UserRelateToOneForUpdateInput
}

input ParagraphRelateToManyForUpdateInput {
  disconnect: [ParagraphWhereUniqueInput!]
  set: [ParagraphWhereUniqueInput!]
  create: [ParagraphCreateInput!]
  connect: [ParagraphWhereUniqueInput!]
}

input LocationRelateToOneForUpdateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  disconnect: Boolean
}

input ReviewItemRelateToManyForUpdateInput {
  disconnect: [ReviewItemWhereUniqueInput!]
  set: [ReviewItemWhereUniqueInput!]
  create: [ReviewItemCreateInput!]
  connect: [ReviewItemWhereUniqueInput!]
}

input CompanyRelateToOneForUpdateInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
}

input ArticleUpdateArgs {
  where: ArticleWhereUniqueInput!
  data: ArticleUpdateInput!
}

input ArticleCreateInput {
  title: String
  introduction: String
  image: ImageFieldInput
  publishDate: DateTime
  status: String
  articleType: ArticleArticleTypeType
  rating: ArticleRatingType
  paragraphs: ParagraphRelateToManyForCreateInput
  location: LocationRelateToOneForCreateInput
  reviewItems: ReviewItemRelateToManyForCreateInput
  company: CompanyRelateToOneForCreateInput
  author: UserRelateToOneForCreateInput
}

input ParagraphRelateToManyForCreateInput {
  create: [ParagraphCreateInput!]
  connect: [ParagraphWhereUniqueInput!]
}

input LocationRelateToOneForCreateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

input ReviewItemRelateToManyForCreateInput {
  create: [ReviewItemCreateInput!]
  connect: [ReviewItemWhereUniqueInput!]
}

input CompanyRelateToOneForCreateInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
}

type Paragraph {
  id: ID!
  title: String
  image: ImageFieldOutput
  content: Paragraph_content_Document
  articles: Article
}

type Paragraph_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ParagraphWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

input ParagraphWhereInput {
  AND: [ParagraphWhereInput!]
  OR: [ParagraphWhereInput!]
  NOT: [ParagraphWhereInput!]
  id: IDFilter
  title: StringFilter
  articles: ArticleWhereInput
}

input ParagraphOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input ParagraphUpdateInput {
  title: String
  image: ImageFieldInput
  content: JSON
  articles: ArticleRelateToOneForUpdateInput
}

input ArticleRelateToOneForUpdateInput {
  create: ArticleCreateInput
  connect: ArticleWhereUniqueInput
  disconnect: Boolean
}

input ParagraphUpdateArgs {
  where: ParagraphWhereUniqueInput!
  data: ParagraphUpdateInput!
}

input ParagraphCreateInput {
  title: String
  image: ImageFieldInput
  content: JSON
  articles: ArticleRelateToOneForCreateInput
}

input ArticleRelateToOneForCreateInput {
  create: ArticleCreateInput
  connect: ArticleWhereUniqueInput
}

type ReviewItem {
  id: ID!
  title: String
  grinder: Float
  coffee: Float
  time: Float
  volume: Float
  items(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  itemsCount(where: ArticleWhereInput! = {}): Int
}

input ReviewItemWhereUniqueInput {
  id: ID
}

input ReviewItemWhereInput {
  AND: [ReviewItemWhereInput!]
  OR: [ReviewItemWhereInput!]
  NOT: [ReviewItemWhereInput!]
  id: IDFilter
  title: StringFilter
  grinder: FloatNullableFilter
  coffee: FloatNullableFilter
  time: FloatNullableFilter
  volume: FloatNullableFilter
  items: ArticleManyRelationFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input ReviewItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  grinder: OrderDirection
  coffee: OrderDirection
  time: OrderDirection
  volume: OrderDirection
}

input ReviewItemUpdateInput {
  title: String
  grinder: Float
  coffee: Float
  time: Float
  volume: Float
  items: ArticleRelateToManyForUpdateInput
}

input ReviewItemUpdateArgs {
  where: ReviewItemWhereUniqueInput!
  data: ReviewItemUpdateInput!
}

input ReviewItemCreateInput {
  title: String
  grinder: Float
  coffee: Float
  time: Float
  volume: Float
  items: ArticleRelateToManyForCreateInput
}

type Company {
  id: ID!
  name: String
  website: String
  twitter: String
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  articlesCount(where: ArticleWhereInput! = {}): Int
}

input CompanyWhereUniqueInput {
  id: ID
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: IDFilter
  name: StringFilter
  website: StringFilter
  twitter: StringFilter
  articles: ArticleManyRelationFilter
}

input CompanyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  website: OrderDirection
  twitter: OrderDirection
}

input CompanyUpdateInput {
  name: String
  website: String
  twitter: String
  articles: ArticleRelateToManyForUpdateInput
}

input CompanyUpdateArgs {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateInput!
}

input CompanyCreateInput {
  name: String
  website: String
  twitter: String
  articles: ArticleRelateToManyForCreateInput
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Location {
  id: ID!
  name: String
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  articlesCount(where: ArticleWhereInput! = {}): Int
  longitude: String
  latitude: String
  city: String
  country: String
  zipcode: String
}

input LocationWhereUniqueInput {
  id: ID
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: IDFilter
  name: StringFilter
  articles: ArticleManyRelationFilter
  longitude: StringFilter
  latitude: StringFilter
  city: StringFilter
  country: StringFilter
  zipcode: StringFilter
}

input LocationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  longitude: OrderDirection
  latitude: OrderDirection
  city: OrderDirection
  country: OrderDirection
  zipcode: OrderDirection
}

input LocationUpdateInput {
  name: String
  articles: ArticleRelateToManyForUpdateInput
  longitude: String
  latitude: String
  city: String
  country: String
  zipcode: String
}

input LocationUpdateArgs {
  where: LocationWhereUniqueInput!
  data: LocationUpdateInput!
}

input LocationCreateInput {
  name: String
  articles: ArticleRelateToManyForCreateInput
  longitude: String
  latitude: String
  city: String
  country: String
  zipcode: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  authenticatedItem: AuthenticatedItem
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  article(where: ArticleWhereUniqueInput!): Article
  articlesCount(where: ArticleWhereInput! = {}): Int
  paragraphs(
    where: ParagraphWhereInput! = {}
    orderBy: [ParagraphOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Paragraph!]
  paragraph(where: ParagraphWhereUniqueInput!): Paragraph
  paragraphsCount(where: ParagraphWhereInput! = {}): Int
  reviewItems(
    where: ReviewItemWhereInput! = {}
    orderBy: [ReviewItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReviewItem!]
  reviewItem(where: ReviewItemWhereUniqueInput!): ReviewItem
  reviewItemsCount(where: ReviewItemWhereInput! = {}): Int
  companies(
    where: CompanyWhereInput! = {}
    orderBy: [CompanyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Company!]
  company(where: CompanyWhereUniqueInput!): Company
  companiesCount(where: CompanyWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  locations(
    where: LocationWhereInput! = {}
    orderBy: [LocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Location!]
  location(where: LocationWhereUniqueInput!): Location
  locationsCount(where: LocationWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
